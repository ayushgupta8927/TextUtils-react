{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/About.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","countwords","text","replace","split","filter","str","length","useState","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showalert","toLowerCase","navigator","clipboard","writeText","join","About","btnText","setBtnText","mystyle","setMyStyle","defaultProps","aboutText","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setalert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb42346e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a  className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark mode</label>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string,\r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Set Title Here\",\r\n    aboutText:\"About\"\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleupclick=()=>{\r\n        //console.log(\"Button is clicked \"+text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted to Upper case \",\"success\");\r\n\r\n    }\r\n    const handlelowclick=()=>{\r\n        //console.log(\"Button is clicked \"+text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showalert(\"Converted to lower case \",\"success\");\r\n\r\n    }\r\n    const handlecopyclick=()=>{\r\n        navigator.clipboard.writeText(text)\r\n        // setCopySuccess('Copied!');\r\n        props.showalert(\"Text copied to clipboard\",\"success\");\r\n\r\n    }\r\n    const handleclearclick=()=>{\r\n        setText('');\r\n        // setCopySuccess('');\r\n        props.showalert(\"Text cleared \",\"success\");\r\n\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showalert(\"Extra Space Removed \",\"success\");\r\n\r\n    }\r\n    const handleOnchange=(event)=>{\r\n        //console.log(\"on change retrieved\");\r\n        setText(event.target.value);\r\n        // setCopySuccess('');\r\n\r\n\r\n    }\r\n    const countwords=(text)=>{\r\n        text= text.replace(/(^\\s*)|(\\s*$)/gi,\"\");//exclude  start and end white-space\r\n        text= text.replace(/[ ]{2,}/gi,\" \");//2 or more space to 1\r\n        text= text.replace(/\\n /,\"\\n\"); // exclude newline with a start spacing\r\n        return text.split(' ').filter(function(str){return str!==\"\";}).length;\r\n    }\r\n\r\n    const [text,setText]=useState(\"\");\r\n    // setText(\"New text here\");\r\n    // const [copySuccess, setCopySuccess] = useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'#343a40'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                {/* <label htmlFor=\"mybox\" className=\"form-label\">Enter Your Text Below</label> */}\r\n                <textarea className=\"form-control\" value={text} id=\"mybox\"onChange={handleOnchange} style={{backgroundColor : props.mode==='dark'?'#343a40':'white', color:props.mode==='dark'?'white':'#343a40'}}rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleupclick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlelowclick}>Convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclearclick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlecopyclick}>Copy Text</button>\r\n            {/* {copySuccess} */}\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n\r\n        </div>\r\n        <div className=\"container my-3\"style={{color : props.mode==='dark'?'white':'#343a40'}}>\r\n            <h1>Paragraph Summary</h1>\r\n            <p>{countwords(text)} words and {text.length} characters</p>\r\n            <p>{0.008*countwords(text)} minutes read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter something in the above Textbox to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const toggleStyle=()=>{\r\n        if(mystyle.color===\"#343a40\"){\r\n            setMyStyle({\r\n            color:\"white\",\r\n            backgroundColor:\"#343a40\"\r\n            })\r\n            setBtnText(\"Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:\"#343a40\",\r\n                backgroundColor:\"white\"\r\n            })\r\n            setBtnText(\"Dark Mode\")\r\n        }\r\n    }\r\n    const [btnText,setBtnText]=useState(\"Dark mode\")\r\n\r\n    const [mystyle,setMyStyle]=useState({\r\n        color:\"black\",\r\n        backgroundColor:\"whitw\"\r\n    })\r\n    return (\r\n        <div className=\"container my-5\" style={mystyle}>\r\n            <h2 className=\"my-3\">About Us</h2>\r\n            <div className=\"accordion my-3\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={mystyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\"style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={mystyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={mystyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className=\"btn btn-dark\">{btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        let lower=word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport About from './Components/About';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setalert] = useState(null)\n  const showalert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  }\n  const toggleMode=()=>{\n    if(mode=== 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#343a40';\n      showalert(\"Dark mode has been enabled \",\"success\");\n      document.title=\"TextUtils - Dark mode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showalert(\"light mode has been enabled \",\"success\");\n\n    }\n  }\n  return (\n    <>\n        <Router>\n\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      \n      <Switch>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/\">\n        <TextForm showalert={showalert} heading=\"Enter the text to Analyze\" mode={mode}/>\n        </Route>\n      </Switch> \n      </div>\n      </Router>\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}